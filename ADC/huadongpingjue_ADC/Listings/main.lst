C51 COMPILER V9.59.0.0   MAIN                                                              05/27/2024 09:38:09 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: D:\KEIL\C51\BIN\C51.EXE main.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\main.ls
                    -t) TABS(2) OBJECT(.\Objects\main.obj)

line level    source

   1          //滑动平均法
   2          #include <STC12C5A60S2.H>
   3          #include "intrins.h"
   4          #define uchar unsigned char
   5          #define uint  unsigned int
   6          #define N 10
   7          int resl;
   8          float voltage;//AD输入电压
   9          uint dis_voltage;//数码管显示电压
  10          uchar code num_disp_L[]={0xc0,0xf9,0xa4,0xb0,0x99,
  11                                   0x92,0x82,0xf8,0x80,0x90};//无小数点，与上0x7F加小数点
  12          uchar num[4]={0,0,0,0};
  13          uchar code wei[4]={0xf7,0xfb,0xfd,0xfe};//位选
  14          uchar rec_count=0;//采样次数
  15          void Delayms(int ms);
  16          void ADC_init();
  17          float ADC_Value(uchar Channel);//滑动平均法，采样10次
  18          uint ADC_Get(uchar Channel);
  19          void dis_choose();
  20          void main()
  21          {
  22   1        uchar i;
  23   1        ADC_init();
  24   1        while(1)
  25   1        {
  26   2            dis_voltage=ADC_Value(0)*1000;
  27   2            dis_choose();
  28   2            for(i=0;i<4;i++)
  29   2            {//数码管动态显示,最高位有小数点
  30   3              if(i==3)//最高位加小数点
  31   3                P0=num_disp_L[num[i]]&0x7F;
  32   3              else
  33   3                P0=num_disp_L[num[i]];
  34   3              P2=wei[i];
  35   3              Delayms(2);
  36   3            } 
  37   2        }
  38   1      }
  39          void Delayms(int ms)    //@11.0592MHz
  40          {
  41   1        unsigned char data i, j;
  42   1        while(ms--)
  43   1        {
  44   2          i = 11;
  45   2          j = 190;
  46   2          do
  47   2          {
  48   3            while (--j);
  49   3          } while (--i);
  50   2        }
  51   1      }
  52          void ADC_init()
  53          {
  54   1        ADC_RES=0;
C51 COMPILER V9.59.0.0   MAIN                                                              05/27/2024 09:38:09 PAGE 2   

  55   1        ADC_RESL=0;
  56   1        P1ASF=0x01;//P10作模拟输入
  57   1        AUXR1=0x00;//ADRJ=0,高8位存ADC_RES,低2位ADC_RESL低2位
  58   1        ADC_CONTR=0x80;//打开ADC电源
  59   1        Delayms(2);
  60   1      }
  61          
  62          float ADC_Value(uchar Channel)
  63          {
  64   1        float AD_Value;
  65   1        uint voltage_buf[N];//缓冲区
  66   1        if(rec_count<N)
  67   1        {
  68   2          voltage_buf[rec_count]=ADC_Get(Channel); 
  69   2            //AD_Value+=voltage_buf[rec_count];
  70   2          AD_Value=(voltage_buf[rec_count]*5.11)/1024.0;//ADRJ=0，取10位转换结果ADC_RES+ADC_RESL=1024*Vin/Vcc
  71   2          rec_count++;
  72   2          return AD_Value/(rec_count*1.0);
  73   2        }
  74   1        else
  75   1        {
  76   2          AD_Value-=AD_Value/(rec_count*1.0);
  77   2          AD_Value+=(ADC_Get(Channel)*5.11)/1024.0;
  78   2          return AD_Value/(rec_count*1.0);
  79   2        }
  80   1      }
  81          
  82          
  83          
  84          uint ADC_Get(uchar Channel)
  85          {
  86   1        ADC_CONTR=0x88|Channel;//打开ADC电源,启动ADC,选择P10作模拟输入通道
  87   1        _nop_(); _nop_(); _nop_(); _nop_();
  88   1        while(!(ADC_CONTR&0x10));    //等待转换完成
  89   1        ADC_CONTR&=0xe7;      //关闭AD转换，ADC_FLAG清0
  90   1        return(ADC_RES*4+ADC_RESL);   //返回AD转换完成的10位数据
  91   1      }
  92          
  93          void dis_choose()
  94          {
  95   1        num[0]=dis_voltage%10;
  96   1        num[1]=dis_voltage/10%10;
  97   1        num[2]=dis_voltage/100%10;
  98   1        num[3]=dis_voltage/1000%10;
  99   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    484    ----
   CONSTANT SIZE    =     14    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     13      26
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
